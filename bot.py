import logging
import json
import aiosqlite

from aiogram import Bot, Dispatcher, types, F
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.enums.content_type import ContentType
from aiogram.filters import CommandStart
from aiogram.enums.parse_mode import ParseMode
from tokendatabase import TokenDBSystem


logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot("8116965156:AAGb9sdlIRqV2WbTJEETIyOSRPgYFAwM8HY")
dp = Dispatcher()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
token_db = TokenDBSystem()

@dp.message(CommandStart())
async def start(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if token_db.get_balance(message.from_user.id) is None:
        # –ï—Å–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–∏—Å—Ç–µ–º—É —Ç–æ–∫–µ–Ω–æ–≤
            token_db.add_student(message.from_user.id)

            webAppInfo = types.WebAppInfo(url="https://killaura-code.github.io/")
            builder = ReplyKeyboardBuilder()
            builder.add(types.KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', web_app=webAppInfo))

            @dp.message(F.text == "/reward")
            async def reward_tokens(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
             if token_db.get_balance(message.from_user.id) is not None:
                token_db.reward_student(message.from_user.id, 10)  # –ù–∞—á–∏—Å–ª–∏—Ç—å 10 —Ç–æ–∫–µ–Ω–æ–≤
             await message.answer("–í—ã –ø–æ–ª—É—á–∏–ª–∏ 10 —Ç–æ–∫–µ–Ω–æ–≤!")
        else:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    
            photo_url = "https://www.upload.ee/image/17277134/photo1.jpg"
            await add_user(message.from_user.id, message.from_user.username, message.from_user.first_name, message.from_user.last_name)
            await message.answer_photo(photo=photo_url, caption="–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –≤ –æ–Ω–ª–∞–π–Ω! –ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n\n"
                           "1. –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ üìö ‚Äî –û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –∏ —É—Ä–æ–∫–∏ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Ç–µ–º–∞–º.\n"
                           "2. –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚ùì ‚Äî –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫—É—Ä—Å–∞–º –∏–ª–∏ –æ–±—É—á–µ–Ω–∏—é, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å!\n"
                           "3. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å üìà ‚Äî –£–∑–Ω–∞–π—Ç–µ, –∫–∞–∫ –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç—Å—è –≤–∞—à–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –∫–∞–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –µ—â–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å.\n\n"
                           "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ!", 
                           reply_markup=builder.as_markup())
    
async def add_user(user_id, username, first_name, last_name):
    try:
        async with aiosqlite.connect('bot_database.db') as db:
            await db.execute('''
                INSERT OR IGNORE INTO users (id, username, first_name, last_name)
                VALUES (?, ?, ?, ?)
            ''', (user_id, username, first_name, last_name))
            await db.commit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

@dp.message(F.content_type == ContentType.WEB_APP_DATA)
async def parse_data(message: types.Message):
    data = json.loads(message.web_app_data.data)
    await message.answer(f'<b>{data["title"]}</b>\n\n<code>{data["desc"]}</code>\n\n{data["text"]}', parse_mode=ParseMode.HTML)

async def setup_db():
    async with aiosqlite.connect('bot_database.db') as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT
            )
        ''')
        await db.commit()

async def main():
    await setup_db()
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
